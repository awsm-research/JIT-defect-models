How to train global model

run command python train_global_model.py <project_name> <global_model_name>

where <project_name> is 'openstack' or 'qt', <global_model_name> is 'RF' or 'LR'

detail of each function in train_global_model.py

    load_change_metrics_df()
        input: 
            cur_proj: from <project_name>
        output: 
            a pandas dataframe of code change features of each commit, a pandas serie of labels of each commit

    split_train_test_data()
        input: 
            feature_df: a dataframe from load_change_metrics_df()
            label: a list of labels from load_change_metrics_df()
            percent_split (int): a percentage of training data
        output:
            x_train, x_test: pandas dataframes of train and test data, respectively
            y_train, y_test: pandas series of train and test data, respectively

    prepare_data()
        input:
            proj_name: from <project_name>
            mode (string):
                'train': return train data only
                'test': return test data only
                'all': return train and test data
        output:
            x_train, x_test: pandas dataframes of train and test data, respectively
            y_train, y_test: pandas series of train and test data, respectively

    train_global_model()
        input:
            proj_name: from <project_name>
            x_train, y_train: training data and label from prepare_data()
            global_model_name (string): name of global model
                'RF': use RandomForestClassifier()
                'LR': use LogisticRegression()
        output:
            a global model which is saved to "'./global_model/<proj_name>_<global_model_name>_global_model.pkl'"

    eval_global_model(proj_name, x_test,y_test, global_model_name = 'RF')
        input:
            proj_name: from <project_name>
            x_test, y_test: testing data and label from prepare_data()
            global_model_name (string): name of global model
                'RF': use RandomForestClassifier()
                'LR': use LogisticRegression()
        output:
            a prediction evaluation score (AUC, F1)
